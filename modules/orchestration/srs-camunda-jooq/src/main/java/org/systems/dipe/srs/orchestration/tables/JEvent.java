/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.orchestration.tables;


import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.orchestration.Indexes;
import org.systems.dipe.srs.orchestration.JOrchestration;
import org.systems.dipe.srs.orchestration.Keys;
import org.systems.dipe.srs.orchestration.tables.records.JEventRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JEvent extends TableImpl<JEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>orchestration.event</code>
     */
    public static final JEvent EVENT = new JEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JEventRecord> getRecordType() {
        return JEventRecord.class;
    }

    /**
     * The column <code>orchestration.event.event_id</code>.
     */
    public final TableField<JEventRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>orchestration.event.status</code>.
     */
    public final TableField<JEventRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>orchestration.event.message</code>.
     */
    public final TableField<JEventRecord, JSONB> MESSAGE = createField(DSL.name("message"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>orchestration.event.error</code>.
     */
    public final TableField<JEventRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>orchestration.event.retry_at</code>.
     */
    public final TableField<JEventRecord, LocalDateTime> RETRY_AT = createField(DSL.name("retry_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>orchestration.event.created</code>.
     */
    public final TableField<JEventRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JEvent(Name alias, Table<JEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private JEvent(Name alias, Table<JEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>orchestration.event</code> table reference
     */
    public JEvent(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>orchestration.event</code> table reference
     */
    public JEvent(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>orchestration.event</code> table reference
     */
    public JEvent() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> JEvent(Table<O> child, ForeignKey<O, JEventRecord> key) {
        super(child, key, EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JOrchestration.ORCHESTRATION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_ORCHESTRATION_EVENT_RETRY, Indexes.IX_ORCHESTRATION_EVENT_STATUS);
    }

    @Override
    public Identity<JEventRecord, Integer> getIdentity() {
        return (Identity<JEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JEventRecord> getPrimaryKey() {
        return Keys.PK_ORCHESTRATION_EVENT;
    }

    @Override
    public JEvent as(String alias) {
        return new JEvent(DSL.name(alias), this);
    }

    @Override
    public JEvent as(Name alias) {
        return new JEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JEvent rename(String name) {
        return new JEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JEvent rename(Name name) {
        return new JEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, JSONB, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
