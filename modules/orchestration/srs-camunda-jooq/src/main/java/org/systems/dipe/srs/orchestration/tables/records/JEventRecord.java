/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.orchestration.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.systems.dipe.srs.orchestration.tables.JEvent;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JEventRecord extends UpdatableRecordImpl<JEventRecord> implements Record7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>orchestration.event.event_id</code>.
     */
    public JEventRecord setEventId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.event_id</code>.
     */
    public Integer getEventId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>orchestration.event.status</code>.
     */
    public JEventRecord setStatus(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.status</code>.
     */
    public String getStatus() {
        return (String) get(1);
    }

    /**
     * Setter for <code>orchestration.event.type</code>.
     */
    public JEventRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.type</code>.
     */
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>orchestration.event.message</code>.
     */
    public JEventRecord setMessage(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.message</code>.
     */
    public String getMessage() {
        return (String) get(3);
    }

    /**
     * Setter for <code>orchestration.event.error</code>.
     */
    public JEventRecord setError(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.error</code>.
     */
    public String getError() {
        return (String) get(4);
    }

    /**
     * Setter for <code>orchestration.event.retry_at</code>.
     */
    public JEventRecord setRetryAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.retry_at</code>.
     */
    public LocalDateTime getRetryAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>orchestration.event.created</code>.
     */
    public JEventRecord setCreated(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>orchestration.event.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return JEvent.EVENT.EVENT_ID;
    }

    @Override
    public Field<String> field2() {
        return JEvent.EVENT.STATUS;
    }

    @Override
    public Field<String> field3() {
        return JEvent.EVENT.TYPE;
    }

    @Override
    public Field<String> field4() {
        return JEvent.EVENT.MESSAGE;
    }

    @Override
    public Field<String> field5() {
        return JEvent.EVENT.ERROR;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return JEvent.EVENT.RETRY_AT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return JEvent.EVENT.CREATED;
    }

    @Override
    public Integer component1() {
        return getEventId();
    }

    @Override
    public String component2() {
        return getStatus();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public String component4() {
        return getMessage();
    }

    @Override
    public String component5() {
        return getError();
    }

    @Override
    public LocalDateTime component6() {
        return getRetryAt();
    }

    @Override
    public LocalDateTime component7() {
        return getCreated();
    }

    @Override
    public Integer value1() {
        return getEventId();
    }

    @Override
    public String value2() {
        return getStatus();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public String value4() {
        return getMessage();
    }

    @Override
    public String value5() {
        return getError();
    }

    @Override
    public LocalDateTime value6() {
        return getRetryAt();
    }

    @Override
    public LocalDateTime value7() {
        return getCreated();
    }

    @Override
    public JEventRecord value1(Integer value) {
        setEventId(value);
        return this;
    }

    @Override
    public JEventRecord value2(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public JEventRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public JEventRecord value4(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public JEventRecord value5(String value) {
        setError(value);
        return this;
    }

    @Override
    public JEventRecord value6(LocalDateTime value) {
        setRetryAt(value);
        return this;
    }

    @Override
    public JEventRecord value7(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public JEventRecord values(Integer value1, String value2, String value3, String value4, String value5, LocalDateTime value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JEventRecord
     */
    public JEventRecord() {
        super(JEvent.EVENT);
    }

    /**
     * Create a detached, initialised JEventRecord
     */
    public JEventRecord(Integer eventId, String status, String type, String message, String error, LocalDateTime retryAt, LocalDateTime created) {
        super(JEvent.EVENT);

        setEventId(eventId);
        setStatus(status);
        setType(type);
        setMessage(message);
        setError(error);
        setRetryAt(retryAt);
        setCreated(created);
    }
}
