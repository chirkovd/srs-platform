/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.inventory.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.inventory.jooq.JInventories;
import org.systems.dipe.srs.inventory.jooq.Keys;
import org.systems.dipe.srs.inventory.jooq.tables.records.JInventoryRecord;

import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JInventory extends TableImpl<JInventoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>inventories.inventory</code>
     */
    public static final JInventory INVENTORY = new JInventory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JInventoryRecord> getRecordType() {
        return JInventoryRecord.class;
    }

    /**
     * The column <code>inventories.inventory.inventory_id</code>.
     */
    public final TableField<JInventoryRecord, UUID> INVENTORY_ID = createField(DSL.name("inventory_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>inventories.inventory.name</code>.
     */
    public final TableField<JInventoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>inventories.inventory.created</code>.
     */
    public final TableField<JInventoryRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JInventory(Name alias, Table<JInventoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JInventory(Name alias, Table<JInventoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>inventories.inventory</code> table reference
     */
    public JInventory(String alias) {
        this(DSL.name(alias), INVENTORY);
    }

    /**
     * Create an aliased <code>inventories.inventory</code> table reference
     */
    public JInventory(Name alias) {
        this(alias, INVENTORY);
    }

    /**
     * Create a <code>inventories.inventory</code> table reference
     */
    public JInventory() {
        this(DSL.name("inventory"), null);
    }

    public <O extends Record> JInventory(Table<O> child, ForeignKey<O, JInventoryRecord> key) {
        super(child, key, INVENTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JInventories.INVENTORIES;
    }

    @Override
    public UniqueKey<JInventoryRecord> getPrimaryKey() {
        return Keys.PK_INVENTORIES_INVENTORY;
    }

    @Override
    public JInventory as(String alias) {
        return new JInventory(DSL.name(alias), this);
    }

    @Override
    public JInventory as(Name alias) {
        return new JInventory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JInventory rename(String name) {
        return new JInventory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JInventory rename(Name name) {
        return new JInventory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
