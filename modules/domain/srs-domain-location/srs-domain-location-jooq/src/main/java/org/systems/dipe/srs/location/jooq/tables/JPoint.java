/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.location.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.location.jooq.JLocations;
import org.systems.dipe.srs.location.jooq.Keys;
import org.systems.dipe.srs.location.jooq.tables.records.JPointRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPoint extends TableImpl<JPointRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>locations.point</code>
     */
    public static final JPoint POINT = new JPoint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPointRecord> getRecordType() {
        return JPointRecord.class;
    }

    /**
     * The column <code>locations.point.point_id</code>.
     */
    public final TableField<JPointRecord, UUID> POINT_ID = createField(DSL.name("point_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>locations.point.location_id</code>.
     */
    public final TableField<JPointRecord, UUID> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>locations.point.longitude</code>.
     */
    public final TableField<JPointRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>locations.point.latitude</code>.
     */
    public final TableField<JPointRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>locations.point.created</code>.
     */
    public final TableField<JPointRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private JPoint(Name alias, Table<JPointRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPoint(Name alias, Table<JPointRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>locations.point</code> table reference
     */
    public JPoint(String alias) {
        this(DSL.name(alias), POINT);
    }

    /**
     * Create an aliased <code>locations.point</code> table reference
     */
    public JPoint(Name alias) {
        this(alias, POINT);
    }

    /**
     * Create a <code>locations.point</code> table reference
     */
    public JPoint() {
        this(DSL.name("point"), null);
    }

    public <O extends Record> JPoint(Table<O> child, ForeignKey<O, JPointRecord> key) {
        super(child, key, POINT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JLocations.LOCATIONS;
    }

    @Override
    public UniqueKey<JPointRecord> getPrimaryKey() {
        return Keys.PK_LOCATIONS_POINT;
    }

    @Override
    public List<ForeignKey<JPointRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POINT__FK_LOCATIONS_POINT_LOCATION);
    }

    private transient JLocation _location;

    /**
     * Get the implicit join path to the <code>locations.location</code> table.
     */
    public JLocation location() {
        if (_location == null)
            _location = new JLocation(this, Keys.POINT__FK_LOCATIONS_POINT_LOCATION);

        return _location;
    }

    @Override
    public JPoint as(String alias) {
        return new JPoint(DSL.name(alias), this);
    }

    @Override
    public JPoint as(Name alias) {
        return new JPoint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPoint rename(String name) {
        return new JPoint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPoint rename(Name name) {
        return new JPoint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, Double, Double, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
