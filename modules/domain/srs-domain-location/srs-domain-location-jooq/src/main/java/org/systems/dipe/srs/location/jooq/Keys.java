/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.location.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.systems.dipe.srs.location.jooq.tables.JComment;
import org.systems.dipe.srs.location.jooq.tables.JLocation;
import org.systems.dipe.srs.location.jooq.tables.JPoint;
import org.systems.dipe.srs.location.jooq.tables.records.JCommentRecord;
import org.systems.dipe.srs.location.jooq.tables.records.JLocationRecord;
import org.systems.dipe.srs.location.jooq.tables.records.JPointRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * locations.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JCommentRecord> PK_LOCATIONS_COMMENT = Internal.createUniqueKey(JComment.COMMENT, DSL.name("PK.locations.comment"), new TableField[] { JComment.COMMENT.COMMENT_ID }, true);
    public static final UniqueKey<JLocationRecord> PK_LOCATIONS_LOCATION = Internal.createUniqueKey(JLocation.LOCATION, DSL.name("PK.locations.location"), new TableField[] { JLocation.LOCATION.LOCATION_ID }, true);
    public static final UniqueKey<JPointRecord> PK_LOCATIONS_POINT = Internal.createUniqueKey(JPoint.POINT, DSL.name("PK.locations.point"), new TableField[] { JPoint.POINT.POINT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JCommentRecord, JPointRecord> COMMENT__FK_LOCATIONS_COMMENT_POINT = Internal.createForeignKey(JComment.COMMENT, DSL.name("FK.locations.comment.point"), new TableField[] { JComment.COMMENT.POINT_ID }, Keys.PK_LOCATIONS_POINT, new TableField[] { JPoint.POINT.POINT_ID }, true);
    public static final ForeignKey<JPointRecord, JLocationRecord> POINT__FK_LOCATIONS_POINT_LOCATION = Internal.createForeignKey(JPoint.POINT, DSL.name("FK.locations.point.location"), new TableField[] { JPoint.POINT.LOCATION_ID }, Keys.PK_LOCATIONS_LOCATION, new TableField[] { JLocation.LOCATION.LOCATION_ID }, true);
}
