/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.location.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.location.jooq.Indexes;
import org.systems.dipe.srs.location.jooq.JLocations;
import org.systems.dipe.srs.location.jooq.Keys;
import org.systems.dipe.srs.location.jooq.tables.records.JCommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JComment extends TableImpl<JCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>locations.comment</code>
     */
    public static final JComment COMMENT = new JComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCommentRecord> getRecordType() {
        return JCommentRecord.class;
    }

    /**
     * The column <code>locations.comment.comment_id</code>.
     */
    public final TableField<JCommentRecord, UUID> COMMENT_ID = createField(DSL.name("comment_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>locations.comment.point_id</code>.
     */
    public final TableField<JCommentRecord, UUID> POINT_ID = createField(DSL.name("point_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>locations.comment.author_id</code>.
     */
    public final TableField<JCommentRecord, UUID> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>locations.comment.comment</code>.
     */
    public final TableField<JCommentRecord, String> COMMENT_ = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>locations.comment.created</code>.
     */
    public final TableField<JCommentRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JComment(Name alias, Table<JCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JComment(Name alias, Table<JCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>locations.comment</code> table reference
     */
    public JComment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>locations.comment</code> table reference
     */
    public JComment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>locations.comment</code> table reference
     */
    public JComment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> JComment(Table<O> child, ForeignKey<O, JCommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JLocations.LOCATIONS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_LOCATIONS_COMMENT_AUTHOR);
    }

    @Override
    public UniqueKey<JCommentRecord> getPrimaryKey() {
        return Keys.PK_LOCATIONS_COMMENT;
    }

    @Override
    public List<ForeignKey<JCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMMENT__FK_LOCATIONS_COMMENT_POINT);
    }

    private transient JPoint _point;

    /**
     * Get the implicit join path to the <code>locations.point</code> table.
     */
    public JPoint point() {
        if (_point == null)
            _point = new JPoint(this, Keys.COMMENT__FK_LOCATIONS_COMMENT_POINT);

        return _point;
    }

    @Override
    public JComment as(String alias) {
        return new JComment(DSL.name(alias), this);
    }

    @Override
    public JComment as(Name alias) {
        return new JComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JComment rename(String name) {
        return new JComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JComment rename(Name name) {
        return new JComment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
