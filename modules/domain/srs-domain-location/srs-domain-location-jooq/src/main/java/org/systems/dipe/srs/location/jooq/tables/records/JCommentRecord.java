/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.location.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.systems.dipe.srs.location.jooq.tables.JComment;

import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCommentRecord extends UpdatableRecordImpl<JCommentRecord> implements Record5<UUID, UUID, UUID, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>locations.comment.comment_id</code>.
     */
    public JCommentRecord setCommentId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>locations.comment.comment_id</code>.
     */
    public UUID getCommentId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>locations.comment.point_id</code>.
     */
    public JCommentRecord setPointId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>locations.comment.point_id</code>.
     */
    public UUID getPointId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>locations.comment.author_id</code>.
     */
    public JCommentRecord setAuthorId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>locations.comment.author_id</code>.
     */
    public UUID getAuthorId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>locations.comment.comment</code>.
     */
    public JCommentRecord setComment(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>locations.comment.comment</code>.
     */
    public String getComment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>locations.comment.created</code>.
     */
    public JCommentRecord setCreated(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>locations.comment.created</code>.
     */
    public LocalDateTime getCreated() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, UUID, UUID, String, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return JComment.COMMENT.COMMENT_ID;
    }

    @Override
    public Field<UUID> field2() {
        return JComment.COMMENT.POINT_ID;
    }

    @Override
    public Field<UUID> field3() {
        return JComment.COMMENT.AUTHOR_ID;
    }

    @Override
    public Field<String> field4() {
        return JComment.COMMENT.COMMENT_;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return JComment.COMMENT.CREATED;
    }

    @Override
    public UUID component1() {
        return getCommentId();
    }

    @Override
    public UUID component2() {
        return getPointId();
    }

    @Override
    public UUID component3() {
        return getAuthorId();
    }

    @Override
    public String component4() {
        return getComment();
    }

    @Override
    public LocalDateTime component5() {
        return getCreated();
    }

    @Override
    public UUID value1() {
        return getCommentId();
    }

    @Override
    public UUID value2() {
        return getPointId();
    }

    @Override
    public UUID value3() {
        return getAuthorId();
    }

    @Override
    public String value4() {
        return getComment();
    }

    @Override
    public LocalDateTime value5() {
        return getCreated();
    }

    @Override
    public JCommentRecord value1(UUID value) {
        setCommentId(value);
        return this;
    }

    @Override
    public JCommentRecord value2(UUID value) {
        setPointId(value);
        return this;
    }

    @Override
    public JCommentRecord value3(UUID value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public JCommentRecord value4(String value) {
        setComment(value);
        return this;
    }

    @Override
    public JCommentRecord value5(LocalDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public JCommentRecord values(UUID value1, UUID value2, UUID value3, String value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JCommentRecord
     */
    public JCommentRecord() {
        super(JComment.COMMENT);
    }

    /**
     * Create a detached, initialised JCommentRecord
     */
    public JCommentRecord(UUID commentId, UUID pointId, UUID authorId, String comment, LocalDateTime created) {
        super(JComment.COMMENT);

        setCommentId(commentId);
        setPointId(pointId);
        setAuthorId(authorId);
        setComment(comment);
        setCreated(created);
    }
}
