/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.search.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.search.jooq.JSearches;
import org.systems.dipe.srs.search.jooq.Keys;
import org.systems.dipe.srs.search.jooq.tables.records.JSearchProcessRecord;

import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSearchProcess extends TableImpl<JSearchProcessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>searches.search_process</code>
     */
    public static final JSearchProcess SEARCH_PROCESS = new JSearchProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JSearchProcessRecord> getRecordType() {
        return JSearchProcessRecord.class;
    }

    /**
     * The column <code>searches.search_process.process_id</code>.
     */
    public final TableField<JSearchProcessRecord, UUID> PROCESS_ID = createField(DSL.name("process_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>searches.search_process.request_id</code>.
     */
    public final TableField<JSearchProcessRecord, UUID> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>searches.search_process.status</code>.
     */
    public final TableField<JSearchProcessRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>searches.search_process.created</code>.
     */
    public final TableField<JSearchProcessRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private JSearchProcess(Name alias, Table<JSearchProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private JSearchProcess(Name alias, Table<JSearchProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>searches.search_process</code> table reference
     */
    public JSearchProcess(String alias) {
        this(DSL.name(alias), SEARCH_PROCESS);
    }

    /**
     * Create an aliased <code>searches.search_process</code> table reference
     */
    public JSearchProcess(Name alias) {
        this(alias, SEARCH_PROCESS);
    }

    /**
     * Create a <code>searches.search_process</code> table reference
     */
    public JSearchProcess() {
        this(DSL.name("search_process"), null);
    }

    public <O extends Record> JSearchProcess(Table<O> child, ForeignKey<O, JSearchProcessRecord> key) {
        super(child, key, SEARCH_PROCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSearches.SEARCHES;
    }

    @Override
    public UniqueKey<JSearchProcessRecord> getPrimaryKey() {
        return Keys.PK_SEARCHES_SEARCH_PROCESS;
    }

    @Override
    public JSearchProcess as(String alias) {
        return new JSearchProcess(DSL.name(alias), this);
    }

    @Override
    public JSearchProcess as(Name alias) {
        return new JSearchProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSearchProcess rename(String name) {
        return new JSearchProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSearchProcess rename(Name name) {
        return new JSearchProcess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
