/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.squad.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.squad.jooq.JSquads;
import org.systems.dipe.srs.squad.jooq.Keys;
import org.systems.dipe.srs.squad.jooq.tables.records.JSquadRecord;

import java.time.LocalDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSquad extends TableImpl<JSquadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>squads.squad</code>
     */
    public static final JSquad SQUAD = new JSquad();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JSquadRecord> getRecordType() {
        return JSquadRecord.class;
    }

    /**
     * The column <code>squads.squad.squad_id</code>.
     */
    public final TableField<JSquadRecord, UUID> SQUAD_ID = createField(DSL.name("squad_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>squads.squad.created</code>.
     */
    public final TableField<JSquadRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private JSquad(Name alias, Table<JSquadRecord> aliased) {
        this(alias, aliased, null);
    }

    private JSquad(Name alias, Table<JSquadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>squads.squad</code> table reference
     */
    public JSquad(String alias) {
        this(DSL.name(alias), SQUAD);
    }

    /**
     * Create an aliased <code>squads.squad</code> table reference
     */
    public JSquad(Name alias) {
        this(alias, SQUAD);
    }

    /**
     * Create a <code>squads.squad</code> table reference
     */
    public JSquad() {
        this(DSL.name("squad"), null);
    }

    public <O extends Record> JSquad(Table<O> child, ForeignKey<O, JSquadRecord> key) {
        super(child, key, SQUAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSquads.SQUADS;
    }

    @Override
    public UniqueKey<JSquadRecord> getPrimaryKey() {
        return Keys.PK_SQUADS_SQUAD;
    }

    @Override
    public JSquad as(String alias) {
        return new JSquad(DSL.name(alias), this);
    }

    @Override
    public JSquad as(Name alias) {
        return new JSquad(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSquad rename(String name) {
        return new JSquad(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSquad rename(Name name) {
        return new JSquad(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
