/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.request.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.request.jooq.Indexes;
import org.systems.dipe.srs.request.jooq.JRequests;
import org.systems.dipe.srs.request.jooq.Keys;
import org.systems.dipe.srs.request.jooq.tables.records.JRequestRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JRequest extends TableImpl<JRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>requests.request</code>
     */
    public static final JRequest REQUEST = new JRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JRequestRecord> getRecordType() {
        return JRequestRecord.class;
    }

    /**
     * The column <code>requests.request.request_id</code>.
     */
    public final TableField<JRequestRecord, UUID> REQUEST_ID = createField(DSL.name("request_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>requests.request.customer_id</code>.
     */
    public final TableField<JRequestRecord, UUID> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>requests.request.supervisor_id</code>.
     */
    public final TableField<JRequestRecord, UUID> SUPERVISOR_ID = createField(DSL.name("supervisor_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>requests.request.approved</code>.
     */
    public final TableField<JRequestRecord, LocalDateTime> APPROVED = createField(DSL.name("approved"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>requests.request.created</code>.
     */
    public final TableField<JRequestRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JRequest(Name alias, Table<JRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private JRequest(Name alias, Table<JRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>requests.request</code> table reference
     */
    public JRequest(String alias) {
        this(DSL.name(alias), REQUEST);
    }

    /**
     * Create an aliased <code>requests.request</code> table reference
     */
    public JRequest(Name alias) {
        this(alias, REQUEST);
    }

    /**
     * Create a <code>requests.request</code> table reference
     */
    public JRequest() {
        this(DSL.name("request"), null);
    }

    public <O extends Record> JRequest(Table<O> child, ForeignKey<O, JRequestRecord> key) {
        super(child, key, REQUEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JRequests.REQUESTS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IX_REQUESTS_REQUEST_CUSTOMER, Indexes.IX_REQUESTS_REQUEST_SUPERVISOR);
    }

    @Override
    public UniqueKey<JRequestRecord> getPrimaryKey() {
        return Keys.PK_REQUESTS_REQUEST;
    }

    @Override
    public JRequest as(String alias) {
        return new JRequest(DSL.name(alias), this);
    }

    @Override
    public JRequest as(Name alias) {
        return new JRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JRequest rename(String name) {
        return new JRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRequest rename(Name name) {
        return new JRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
