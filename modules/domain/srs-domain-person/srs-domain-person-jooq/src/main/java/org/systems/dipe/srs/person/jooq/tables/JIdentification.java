/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.person.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.person.jooq.JPeople;
import org.systems.dipe.srs.person.jooq.Keys;
import org.systems.dipe.srs.person.jooq.tables.records.JIdentificationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JIdentification extends TableImpl<JIdentificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>people.identification</code>
     */
    public static final JIdentification IDENTIFICATION = new JIdentification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIdentificationRecord> getRecordType() {
        return JIdentificationRecord.class;
    }

    /**
     * The column <code>people.identification.identity_id</code>.
     */
    public final TableField<JIdentificationRecord, String> IDENTITY_ID = createField(DSL.name("identity_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>people.identification.identity_type</code>.
     */
    public final TableField<JIdentificationRecord, String> IDENTITY_TYPE = createField(DSL.name("identity_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>people.identification.person_id</code>.
     */
    public final TableField<JIdentificationRecord, UUID> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>people.identification.created</code>.
     */
    public final TableField<JIdentificationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private JIdentification(Name alias, Table<JIdentificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JIdentification(Name alias, Table<JIdentificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>people.identification</code> table reference
     */
    public JIdentification(String alias) {
        this(DSL.name(alias), IDENTIFICATION);
    }

    /**
     * Create an aliased <code>people.identification</code> table reference
     */
    public JIdentification(Name alias) {
        this(alias, IDENTIFICATION);
    }

    /**
     * Create a <code>people.identification</code> table reference
     */
    public JIdentification() {
        this(DSL.name("identification"), null);
    }

    public <O extends Record> JIdentification(Table<O> child, ForeignKey<O, JIdentificationRecord> key) {
        super(child, key, IDENTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPeople.PEOPLE;
    }

    @Override
    public UniqueKey<JIdentificationRecord> getPrimaryKey() {
        return Keys.PK_PEOPLE_IDENTIFICATION;
    }

    @Override
    public List<ForeignKey<JIdentificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IDENTIFICATION__FK_PEOPLE_IDENTIFICATION_PERSON);
    }

    private transient JPerson _person;

    /**
     * Get the implicit join path to the <code>people.person</code> table.
     */
    public JPerson person() {
        if (_person == null)
            _person = new JPerson(this, Keys.IDENTIFICATION__FK_PEOPLE_IDENTIFICATION_PERSON);

        return _person;
    }

    @Override
    public JIdentification as(String alias) {
        return new JIdentification(DSL.name(alias), this);
    }

    @Override
    public JIdentification as(Name alias) {
        return new JIdentification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIdentification rename(String name) {
        return new JIdentification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIdentification rename(Name name) {
        return new JIdentification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, UUID, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
