/*
 * This file is generated by jOOQ.
 */
package org.systems.dipe.srs.person.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.systems.dipe.srs.person.jooq.JSrsPeople;
import org.systems.dipe.srs.person.jooq.Keys;
import org.systems.dipe.srs.person.jooq.tables.records.JContactRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JContact extends TableImpl<JContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>srs_people.contact</code>
     */
    public static final JContact CONTACT = new JContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JContactRecord> getRecordType() {
        return JContactRecord.class;
    }

    /**
     * The column <code>srs_people.contact.contact_id</code>.
     */
    public final TableField<JContactRecord, UUID> CONTACT_ID = createField(DSL.name("contact_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>srs_people.contact.person_id</code>.
     */
    public final TableField<JContactRecord, UUID> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>srs_people.contact.phone</code>.
     */
    public final TableField<JContactRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>srs_people.contact.email</code>.
     */
    public final TableField<JContactRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>srs_people.contact.created</code>.
     */
    public final TableField<JContactRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private JContact(Name alias, Table<JContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private JContact(Name alias, Table<JContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>srs_people.contact</code> table reference
     */
    public JContact(String alias) {
        this(DSL.name(alias), CONTACT);
    }

    /**
     * Create an aliased <code>srs_people.contact</code> table reference
     */
    public JContact(Name alias) {
        this(alias, CONTACT);
    }

    /**
     * Create a <code>srs_people.contact</code> table reference
     */
    public JContact() {
        this(DSL.name("contact"), null);
    }

    public <O extends Record> JContact(Table<O> child, ForeignKey<O, JContactRecord> key) {
        super(child, key, CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSrsPeople.SRS_PEOPLE;
    }

    @Override
    public UniqueKey<JContactRecord> getPrimaryKey() {
        return Keys.PK_SRS_PEOPLE_CONTACT;
    }

    @Override
    public List<ForeignKey<JContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTACT__FK_SRS_PEOPLE_CONTACT_PERSON);
    }

    private transient JPerson _person;

    /**
     * Get the implicit join path to the <code>srs_people.person</code> table.
     */
    public JPerson person() {
        if (_person == null)
            _person = new JPerson(this, Keys.CONTACT__FK_SRS_PEOPLE_CONTACT_PERSON);

        return _person;
    }

    @Override
    public JContact as(String alias) {
        return new JContact(DSL.name(alias), this);
    }

    @Override
    public JContact as(Name alias) {
        return new JContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JContact rename(String name) {
        return new JContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JContact rename(Name name) {
        return new JContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
