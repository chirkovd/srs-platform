buildscript {
    ext {
        encoding = 'UTF-8'

        springBootVersion = '2.6.3'
        springCloudVersion = "2021.0.1"
        testContainersVersion = "1.16.3"
        camundaVersion = "7.16.0"

        allureVersion = "2.17.3"
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.qameta.allure.gradle.adapter:allure-adapter-plugin:2.9.6"
    }
}

plugins {
    id 'java'
    id "nu.studer.jooq" version "7.1.1"
    id 'io.qameta.allure-aggregate-report' version '2.9.6'
}

allure {
    version.set("${allureVersion}")
}

allprojects {

    group 'org.systems.dipe'
    version '1.0-SNAPSHOT'

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    tasks.withType(JavaCompile) {
        options.encoding = "$encoding"
    }

    apply plugin: "nu.studer.jooq"
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
        }
        dependencies {
            dependency "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaVersion}"
            dependency "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaVersion}"
            dependency "org.camunda.bpm:camunda-engine:${camundaVersion}"

            dependency 'org.apache.commons:commons-collections4:4.4'
            dependency 'org.apache.commons:commons-lang3:3.12.0'

            dependency 'org.jooq:jooq:3.16.4'
            dependency 'org.jooq:jooq-meta:3.16.4'
            dependency 'org.jooq:jooq-codegen:3.16.4'

            dependency 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

            dependency 'org.mapstruct:mapstruct:1.4.2.Final'
            dependency 'org.mapstruct:mapstruct-processor:1.4.2.Final'

            dependency "io.qameta.allure:allure-java-commons:${allureVersion}"
        }
    }

    dependencies {
        implementation 'org.apache.commons:commons-collections4'
        implementation 'org.apache.commons:commons-lang3'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
    }
}

subprojects {

    if (project.name.endsWith("-service")) {
        apply from: "${rootDir}/gradle/service.gradle"
    }

    if (project.name.endsWith("-module")) {

        dependencies {

            testImplementation 'org.mockito:mockito-core'
            testImplementation 'org.junit.jupiter:junit-jupiter'
            testImplementation 'org.junit.jupiter:junit-jupiter-params'
            testImplementation 'io.qameta.allure:allure-java-commons'

            annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
            annotationProcessor 'org.mapstruct:mapstruct-processor'
            annotationProcessor project(":srs-mapstruct-lib")
        }

        apply plugin: 'io.qameta.allure-adapter'

        allure {
            version.set("${allureVersion}")
            adapter {
                allureJavaVersion.set("${allureVersion}")
                frameworks {
                    junit5 {
                        adapterVersion.set("${allureVersion}")
                    }
                }
            }
        }
    }

}

//executes test tasks in all subprojects and generates single test report
task singleTestReport(type: TestReport) {
    destinationDir = file("${rootProject.buildDir}/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

apply from: "${rootDir}/gradle/jooq.gradle"
